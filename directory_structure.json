{
    "__files__": {
        ".env.local": null,
        ".eslintrc.json": null,
        ".gitignore": null,
        "codes.py": null,
        "components.json": null,
        "directory_structure.json": null,
        "favicon.ico": null,
        "next-env.d.ts": "/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\n",
        "next.config.mjs": null,
        "package-lock.json": null,
        "package.json": null,
        "postcss.config.mjs": null,
        "README.md": null,
        "tailwind.config.ts": "import type { Config } from \"tailwindcss\"\n\nconst config: Config = {\n  content: [\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      backdropBlur: {\n        xs: \"2px\",\n      },\n      animation: {\n        \"fade-in\": \"fadeIn 0.5s ease-in-out\",\n        \"slide-up\": \"slideUp 0.3s ease-out\",\n      },\n      keyframes: {\n        fadeIn: {\n          \"0%\": { opacity: \"0\" },\n          \"100%\": { opacity: \"1\" },\n        },\n        slideUp: {\n          \"0%\": { transform: \"translateY(10px)\", opacity: \"0\" },\n          \"100%\": { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\n\nexport default config\n",
        "tsconfig.json": null
    },
    "app": {
        "__files__": {
            "globals.css": null,
            "icon.ico": null,
            "layout.tsx": "// app/layout.tsx\nimport type React from \"react\"\nimport type { Metadata } from \"next\"\nimport { Inter } from \"next/font/google\"\nimport \"./globals.css\"\nimport { AuthProvider } from \"@/components/auth-provider\"\nimport { Toaster } from \"sonner\"\nimport { Footer } from \"@/components/Footer\"\n\nconst inter = Inter({ subsets: [\"latin\"] })\n\nexport const metadata: Metadata = {\n  title: \"GameSync\",\n  description: \"GameSync platform for scheduling games\",\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"ko\" className=\"min-h-screen\">\n      <head>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </head>\n      <body\n        className={`\n          ${inter.className}\n          flex flex-col\n          min-h-screen\n          bg-gradient-to-br\n          from-purple-900\n          via-blue-900\n          to-indigo-900\n        `}\n      >\n        <AuthProvider>\n          {children}\n          <Toaster\n            theme=\"dark\"\n            position=\"top-right\"\n            toastOptions={{\n              style: {\n                background: \"rgba(255, 255, 255, 0.1)\",\n                backdropFilter: \"blur(12px)\",\n                border: \"1px solid rgba(255, 255, 255, 0.2)\",\n                color: \"white\",\n              },\n            }}\n          />\n          <Footer />\n        </AuthProvider>\n      </body>\n    </html>\n  )\n}\n",
            "page.tsx": "import { redirect } from \"next/navigation\"\nimport { cookies } from \"next/headers\"\nimport GameSyncLanding from \"@/components/GameSyncLanding\"\n\nexport default async function HomePage() {\n  const cookieStore = await cookies()\n  const token = cookieStore.get(\"auth-token\")\n\n  if (token) {\n    redirect(\"/dashboard\")\n  }\n  return <GameSyncLanding />\n}\n"
        },
        "auth": {
            "discord": {
                "callback": {
                    "__files__": {
                        "ClientCallback.tsx": "// app/(auth)/auth/discord/callback/ClientCallback.tsx\n\"use client\";\n\nimport { useEffect } from \"react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { authService } from \"@/lib/auth-service\";\n\nexport default function ClientCallback() {\n  const router = useRouter();\n  const params = useSearchParams();\n  const token = params.get(\"token\");\n  const userParam = params.get(\"user\");\n\n  useEffect(() => {\n    if (token && userParam) {\n      authService.setToken(token);\n      let userObj;\n      try {\n        userObj = JSON.parse(decodeURIComponent(userParam));\n      } catch {\n        router.replace(\"/auth/login\");\n        return;\n      }\n      authService.setCurrentUser(userObj);\n      router.replace(\"/dashboard\");\n    } else {\n      router.replace(\"/auth/login\");\n    }\n  }, [token, userParam, router]);\n\n  return <div>처리 중입니다…</div>;\n}\n",
                        "page.tsx": "// app/(auth)/auth/discord/callback/page.tsx\n// 서버 컴포넌트입니다.\n\nexport const dynamic = \"force-dynamic\";\n\nimport ClientCallback from \"./ClientCallback\";\n\nexport default function Page() {\n  return <ClientCallback />;\n}\n"
                    }
                }
            },
            "login": {
                "__files__": {
                    "page.tsx": "\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { toast } from \"sonner\"\nimport { authService } from \"@/lib/auth-service\"\nimport { Loader2, GamepadIcon } from \"lucide-react\"\nimport { DiscordIcon } from \"@/components/icons/discord-icon\"\n\nexport default function LoginPage() {\n  const [username, setUsername] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [isDiscordLoading, setIsDiscordLoading] = useState(false)\n  const router = useRouter()\n\n  useEffect(() => {\n    if (authService.isAuthenticated()) {\n      router.replace(\"/dashboard\")\n    }\n  }, [router])\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      await authService.login({ username, password })\n      toast.success(\"로그인 성공\", {\n        description: \"환영합니다!\",\n      })\n      router.push(\"/dashboard\")\n    } catch (error) {\n      toast.error(\"로그인 실패\", {\n        description: \"아이디 또는 비밀번호를 확인해주세요.\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleDiscordLogin = () => {\n    setIsDiscordLoading(true)\n    // Discord 로그인 페이지로 리다이렉트하기 전에 로딩 상태 표시\n    window.location.href = `${process.env.NEXT_PUBLIC_API_URL!.replace(/\\/api$/, \"\")}/oauth2/authorization/discord`\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-purple-900\n          via-blue-900\n          to-indigo-900\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 glass rounded-2xl mb-4\">\n            <GamepadIcon className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-white mb-2\">GameSync</h1>\n          <p className=\"text-white/70\">게임 스케줄링 플랫폼에 로그인하세요</p>\n        </div>\n\n        <Card className=\"glass border-white/20\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">로그인</CardTitle>\n            <CardDescription className=\"text-white/70\">계정 정보를 입력해주세요</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Discord 로그인 버튼 */}\n            <Button\n              onClick={handleDiscordLogin}\n              disabled={isDiscordLoading || isLoading}\n              className=\"w-full bg-[#5865F2] hover:bg-[#4752C4] text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 flex items-center justify-center gap-3 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isDiscordLoading ? (\n                <>\n                  <Loader2 className=\"w-5 h-5 animate-spin\" />\n                  <span>Discord 연결 중...</span>\n                </>\n              ) : (\n                <>\n                  <DiscordIcon className=\"w-5 h-5\" />\n                  <span>Discord로 계속하기</span>\n                </>\n              )}\n            </Button>\n\n            {/* 구분선 */}\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-white/20\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-transparent px-2 text-white/50\">또는</span>\n              </div>\n            </div>\n\n            {/* 일반 로그인 폼 */}\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\" className=\"text-white\">\n                  사용자명\n                </Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  className=\"glass border-white/30 text-white placeholder:text-white/50 focus:border-white/50 focus:ring-white/20\"\n                  placeholder=\"사용자명을 입력하세요\"\n                  required\n                  disabled={isDiscordLoading}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-white\">\n                  비밀번호\n                </Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"glass border-white/30 text-white placeholder:text-white/50 focus:border-white/50 focus:ring-white/20\"\n                  placeholder=\"비밀번호를 입력하세요\"\n                  required\n                  disabled={isDiscordLoading}\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full glass-button font-medium py-3\"\n                disabled={isLoading || isDiscordLoading}\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    로그인 중...\n                  </>\n                ) : (\n                  \"로그인\"\n                )}\n              </Button>\n            </form>\n\n            <div className=\"text-center\">\n              <p className=\"text-white/70 text-sm\">\n                계정이 없으신가요?{\" \"}\n                <Link\n                  href=\"/auth/signup\"\n                  className=\"text-blue-300 hover:text-blue-200 underline font-medium transition-colors\"\n                >\n                  회원가입\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n"
                }
            },
            "signup": {
                "__files__": {
                    "page.tsx": "\"use client\"\n\nimport type React from \"react\"\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { toast } from \"sonner\"\nimport { authService } from \"@/lib/auth-service\"\nimport { Loader2, GamepadIcon } from \"lucide-react\"\nimport { DiscordIcon } from \"@/components/icons/discord-icon\"\n\nexport default function SignupPage() {\n  const [username, setUsername] = useState(\"\")\n  const [nickname, setNickname] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [isDiscordLoading, setIsDiscordLoading] = useState(false)\n  const router = useRouter()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    // 아이디 유효성 검사\n    if (username.length < 3 || username.length > 20) {\n      toast.error(\"아이디 길이 오류\", {\n        description: \"아이디는 3자 이상 20자 이하로 입력해주세요.\",\n      })\n      return\n    }\n    if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n      toast.error(\"아이디 형식 오류\", {\n        description: \"아이디는 영문, 숫자, 밑줄(_)만 사용할 수 있습니다.\",\n      })\n      return\n    }\n\n    // 사용자명 유효성 검사\n    if (nickname.length < 2 || nickname.length > 30) {\n      toast.error(\"사용자명 길이 오류\", {\n        description: \"사용자명은 2자 이상 30자 이하로 입력해주세요.\",\n      })\n      return\n    }\n\n    // 비밀번호 유효성 검사\n    if (password.length < 8) {\n      toast.error(\"비밀번호 길이 오류\", {\n        description: \"비밀번호는 최소 8자 이상이어야 합니다.\",\n      })\n      return\n    }\n\n    if (password !== confirmPassword) {\n      toast.error(\"비밀번호 확인 오류\", {\n        description: \"비밀번호가 일치하지 않습니다.\",\n      })\n      return\n    }\n\n    setIsLoading(true)\n\n    try {\n      await authService.signup({ username, password, nickname })\n      toast.success(\"회원가입 성공\", {\n        description: \"계정이 생성되었습니다. 로그인해주세요.\",\n      })\n      router.push(\"/auth/login\")\n    } catch (error) {\n      toast.error(\"회원가입 실패\", {\n        description: \"다시 시도해주세요.\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleDiscordSignup = () => {\n    setIsDiscordLoading(true)\n    window.location.href = `${process.env.NEXT_PUBLIC_API_URL!.replace(/\\/api$/, \"\")}/oauth2/authorization/discord`\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 glass rounded-2xl mb-4\">\n            <GamepadIcon className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-white mb-2\">GameSync</h1>\n          <p className=\"text-white/70\">게임 스케줄링 플랫폼에 가입하세요</p>\n        </div>\n\n        <Card className=\"glass border-white/20\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">회원가입</CardTitle>\n            <CardDescription className=\"text-white/70\">새 계정을 만들어보세요</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Discord 회원가입 버튼 */}\n            <Button\n              onClick={handleDiscordSignup}\n              disabled={isDiscordLoading || isLoading}\n              className=\"w-full bg-[#5865F2] hover:bg-[#4752C4] text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 flex items-center justify-center gap-3 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isDiscordLoading ? (\n                <>\n                  <Loader2 className=\"w-5 h-5 animate-spin\" />\n                  <span>Discord 연결 중...</span>\n                </>\n              ) : (\n                <>\n                  <DiscordIcon className=\"w-5 h-5\" />\n                  <span>Discord로 빠른 가입</span>\n                </>\n              )}\n            </Button>\n\n            {/* 구분선 */}\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-white/20\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-transparent px-2 text-white/50\">또는</span>\n              </div>\n            </div>\n\n            {/* 일반 회원가입 폼 */}\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\" className=\"text-white\">\n                  로그인 아이디 (3~20자, 영문,숫자)\n                </Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  minLength={3}\n                  maxLength={20}\n                  pattern=\"^[a-zA-Z0-9_]+$\"\n                  title=\"3~20자 영문, 숫자, 밑줄(_)만 가능\"\n                  className=\"glass border-white/30 text-white placeholder:text-white/50 focus:border-white/50 focus:ring-white/20\"\n                  placeholder=\"로그인 아이디를 입력하세요\"\n                  required\n                  disabled={isDiscordLoading}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"nickname\" className=\"text-white\">\n                  사용자명 (2~30자)\n                </Label>\n                <Input\n                  id=\"nickname\"\n                  type=\"text\"\n                  value={nickname}\n                  onChange={(e) => setNickname(e.target.value)}\n                  minLength={2}\n                  maxLength={30}\n                  title=\"2~30자 사이로 입력해주세요\"\n                  className=\"glass border-white/30 text-white placeholder:text-white/50 focus:border-white/50 focus:ring-white/20\"\n                  placeholder=\"사용자명을 입력하세요\"\n                  required\n                  disabled={isDiscordLoading}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-white\">\n 비밀번호 (최소 8자)\n</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  minLength={8}\n                  title=\"비밀번호는 최소 8자 이상이어야 합니다.\"\n                  className=\"glass border-white/30 text-white placeholder:text-white/50 focus:border-white/50 focus:ring-white/20\"\n                  placeholder=\"비밀번호를 입력하세요\"\n                  required\n                  disabled={isDiscordLoading}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\" className=\"text-white\">\n                  비밀번호 확인\n                </Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  minLength={8}\n                  title=\"비밀번호를 다시 입력하세요\"\n                  className=\"glass border-white/30 text-white placeholder:text-white/50 focus:border-white/50 focus:ring-white/20\"\n                  placeholder=\"비밀번호를 다시 입력하세요\"\n                  required\n                  disabled={isDiscordLoading}\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full glass-button font-medium py-3\"\n                disabled={isLoading || isDiscordLoading}\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    가입 중...\n                  </>\n                ) : (\n                  \"회원가입\"\n                )}\n              </Button>\n            </form>\n\n            <div className=\"text-center\">\n              <p className=\"text-white/70 text-sm\">\n                이미 계정이 있으신가요? {\" \"}\n                <Link\n                  href=\"/auth/login\"\n                  className=\"text-blue-300 hover:text-blue-200 underline font-medium transition-colors\"\n                >\n                  로그인\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n"
                }
            }
        },
        "dashboard": {
            "__files__": {
                "page.tsx": "'use client';\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { toast } from \"sonner\";\nimport { serverService, Server as IServer } from \"@/lib/server-service\";\nimport { authService } from \"@/lib/auth-service\";\nimport { CreateServerModal } from \"@/components/create-server-modal\";\nimport { JoinByCodeModal } from \"@/components/join-by-code-modal\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Plus, Users, Clock } from \"lucide-react\";\nimport { useProtectedRoute } from \"@/app/hooks/useProtectedRoute\";  // <-- 절대 경로\n\nexport default function DashboardPage() {\n  useProtectedRoute();\n\n  const [servers, setServers] = useState<IServer[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showJoinModal, setShowJoinModal] = useState(false);\n  const router = useRouter();\n\n  useEffect(() => {\n    loadServers();\n  }, []);\n\n  const loadServers = async () => {\n    setIsLoading(true);\n    try {\n      const data = await serverService.getMyServers();\n      setServers(data);\n    } catch {\n      toast.error(\"서버 로드 실패\", {\n        description: \"내 서버 정보를 불러오는데 실패했습니다.\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleServerCreated = (newServer: IServer) => {\n    setServers((prev) => [...prev, newServer]);\n    setShowCreateModal(false);\n    toast.success(\"서버 생성 완료\", {\n      description: `${newServer.name} 서버가 생성되었습니다.`,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"text-white\">로딩 중...</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const currentUserId = authService.getCurrentUserId();\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white mb-2\">대시보드</h1>\n            <p className=\"text-white/70\">\n              내가 참여한 서버를 관리하고 스케줄을 확인하세요\n            </p>\n          </div>\n          <div className=\"flex\">\n            <Button\n              onClick={() => setShowJoinModal(true)}\n              className=\"mr-2 glass-button hover:bg-white/20 h-12 px-6\"\n            >\n              초대 코드로 참가\n            </Button>\n            <Button\n              onClick={() => setShowCreateModal(true)}\n              className=\"glass-button hover:bg-white/20 h-12 px-6\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" />서버 생성\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {servers.map((server) => {\n            const isOwner = server.ownerId === currentUserId;\n            return (\n              <Card\n                key={server.id}\n                className=\"glass bg-white/10 border-white/20 hover:bg-white/20 transition-all duration-300 lg:p-8\"\n              >\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-white\">\n                      {server.name}\n                    </CardTitle>\n                    <Badge variant=\"secondary\" className=\"glass text-yellow-300\">\n                      {isOwner ? \"소유자\" : \"멤버\"}\n                    </Badge>\n                  </div>\n                  <CardDescription className=\"text-white/70\">\n                    서버장: {server.owner}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center text-white/80\">\n                      <Users className=\"mr-2 h-4 w-4\" />\n                      <span>{server.members.length}명 참여</span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-white/80\">\n                      <div className=\"flex items-center\">\n                        <Clock className=\"mr-2 h-4 w-4\" />\n                        <span>초기화: {server.resetTime}</span>\n                      </div>\n                      <Button\n                        onClick={() => router.push(`/server/${server.id}`)}\n                        className=\"glass-button hover:bg-white/20 h-15 px-8\"\n                        size=\"sm\"\n                      >\n                        입장\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {servers.length === 0 && (\n          <div className=\"text-center py-12\">\n            <div className=\"glass max-w-md mx-auto p-8\">\n              <h3 className=\"text-xl font-semibold text-white mb-2\">\n                서버가 없습니다\n              </h3>\n              <p className=\"text-white/70 mb-4\">\n                초대 코드를 입력하거나 새 서버를 생성하세요.\n              </p>\n              <Button\n                onClick={() => setShowJoinModal(true)}\n                className=\"glass-button hover:bg-white/20 h-12 px-6 mr-2\"\n              >\n                초대 코드로 참가\n              </Button>\n              <Button\n                onClick={() => setShowCreateModal(true)}\n                className=\"glass-button hover:bg-white/20 h-12 px-6\"\n              >\n                서버 생성\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <CreateServerModal\n        open={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n        onServerCreated={handleServerCreated}\n      />\n      <JoinByCodeModal\n        open={showJoinModal}\n        onClose={() => setShowJoinModal(false)}\n        onJoinSuccess={loadServers}\n      />\n    </div>\n  );\n}\n"
            }
        },
        "fonts": {
            "__files__": {
                "GeistMonoVF.woff": null,
                "GeistVF.woff": null
            }
        },
        "hooks": {
            "__files__": {
                "useProtectedRoute.ts": "\"use client\"\nimport { useEffect } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { authService } from \"@/lib/auth-service\"\n\nexport function useProtectedRoute() {\n  const router = useRouter()\n  useEffect(() => {\n    if (!authService.isAuthenticated()) {\n      router.replace(\"/auth/login\")\n    }\n  }, [router])\n}\n"
            }
        },
        "server": {
            "[id]": {
                "__files__": {
                    "page.tsx": "\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { useParams, useRouter } from \"next/navigation\"\nimport { Navbar } from \"@/components/navbar\"\nimport { TimetableView } from \"@/components/timetable-view\"\nimport { ServerOverview } from \"@/components/server-overview\"\nimport { GameManagement } from \"@/components/game-management\"\nimport { toast } from \"sonner\"\nimport { serverService, Server as IServer } from \"@/lib/server-service\"\nimport { Card, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { useProtectedRoute } from \"@/app/hooks/useProtectedRoute\"\n\nasync function copyText(text: string) {\n  if (navigator.clipboard?.writeText) {\n    return navigator.clipboard.writeText(text)\n  } else {\n    const textarea = document.createElement(\"textarea\")\n    textarea.value = text\n    textarea.style.position = \"fixed\"\n    textarea.style.opacity = \"0\"\n    document.body.appendChild(textarea)\n    textarea.focus()\n    textarea.select()\n    document.execCommand(\"copy\")\n    document.body.removeChild(textarea)\n    return Promise.resolve()\n  }\n}\n\nexport default function ServerDetailPage() {\n  useProtectedRoute()\n  const params = useParams()\n  const router = useRouter()\n  const serverId = Number(params.id)\n\n  const [server, setServer] = useState<IServer | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    loadServer()\n  }, [serverId])\n\n  async function loadServer() {\n    try {\n      const data = await serverService.getServer(serverId)\n      setServer(data)\n    } catch {\n      toast.error(\"서버 정보 로드 실패\", {\n        description: \"서버 정보를 불러오는데 실패했습니다.\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"text-white\">로딩 중...</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!server) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-bold text-white mb-2\">\n              서버를 찾을 수 없습니다\n            </h2>\n            <p className=\"text-white/70\">\n              요청한 서버가 존재하지 않거나 접근 권한이 없습니다.\n            </p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const currentUser = localStorage.getItem(\"current-user\")\n  const isOwner = server.owner === currentUser\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar />\n      <div className=\"container mx-auto px-4 py-6\">\n        <Card className=\"glass border-white/20 mb-6\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-3xl font-bold text-white\">\n              {server.name}\n            </CardTitle>\n            <div className=\"flex items-center justify-between\">\n              <CardDescription className=\"text-white/70\">\n                서버장: {server.owner}\n              </CardDescription>\n              <div className=\"flex items-center gap-2\">\n                <CardDescription className=\"text-white/70\">\n                  초대코드 {server.inviteCode}\n                </CardDescription>\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full glass border-white/30 text-white hover:bg-black/10 hover:text-white\"\n                  onClick={async () => {\n                    try {\n                      await copyText(server.inviteCode)\n                      toast.success(\"초대 코드가 복사되었습니다\")\n                    } catch {\n                      toast.error(\"초대 코드 복사 실패\")\n                    }\n                  }}\n                >\n                  복사\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-6\">\n          <div className=\"lg:col-span-9\">\n            <TimetableView serverId={serverId} />\n          </div>\n          <div className=\"lg:col-span-3 flex flex-col gap-6\">\n            <ServerOverview\n              server={server}\n              onServerUpdate={(s) => setServer(s)}\n            />\n            <GameManagement serverId={serverId} />\n            {!isOwner && (\n              <Button\n                variant=\"destructive\"\n                className=\"w-full mt-2 glass-button\"\n                onClick={async () => {\n                  if (!confirm(\"이 서버를 떠나시겠습니까?\")) return\n                  try {\n                    await serverService.leaveServer(serverId)\n                    toast.success(\"서버를 떠났습니다\")\n                    router.push(\"/dashboard\")\n                  } catch {\n                    toast.error(\"서버 떠나기 실패\")\n                  }\n                }}\n              >\n                서버 떠나기\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n"
                }
            }
        },
        "stats": {
            "[id]": {
                "__files__": {
                    "page.tsx": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useParams } from \"next/navigation\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Navbar } from \"@/components/navbar\"\nimport { toast } from \"sonner\"\nimport { timetableService } from \"@/lib/timetable-service\"\nimport { Trophy, Clock, TrendingUp, Users } from \"lucide-react\"\nimport { useProtectedRoute } from \"@/app/hooks/useProtectedRoute\"\n\ninterface Stats {\n  topGame: string\n  avgSlot: string\n  peakSlot: string\n  peakCount: number\n}\n\nexport default function StatsPage() {\n  useProtectedRoute()\n  const params = useParams()\n  const serverId = Number.parseInt(params.id as string)\n  const [stats, setStats] = useState<Stats | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect(() => {\n    loadStats()\n  }, [serverId])\n\n  const loadStats = async () => {\n    try {\n      const data = await timetableService.getStats(serverId)\n      setStats(data)\n    } catch (error) {\n      toast.error(\"통계 로드 실패\", {\n        description: \"통계 정보를 불러오는데 실패했습니다.\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"text-white\">로딩 중...</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-white mb-2\">서버 통계</h1>\n          <p className=\"text-white/70\">게임 플레이 패턴과 인기 시간대를 확인하세요</p>\n        </div>\n\n        {stats ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"glass border-white/20\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-white/80\">최다 플레이 게임</CardTitle>\n                <Trophy className=\"h-4 w-4 text-yellow-400\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">{stats.topGame}</div>\n                <p className=\"text-xs text-white/60\">가장 인기 있는 게임</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass border-white/20\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-white/80\">평균 플레이 시간</CardTitle>\n                <Clock className=\"h-4 w-4 text-blue-400\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">\n                  {new Date(stats.avgSlot).toLocaleTimeString(\"ko-KR\", {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                  })}\n                </div>\n                <p className=\"text-xs text-white/60\">평균적인 게임 시작 시간</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass border-white/20\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-white/80\">피크 시간대</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-green-400\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">\n                  {new Date(stats.peakSlot).toLocaleTimeString(\"ko-KR\", {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                  })}\n                </div>\n                <p className=\"text-xs text-white/60\">가장 활발한 시간대</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass border-white/20\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-white/80\">피크 참여자 수</CardTitle>\n                <Users className=\"h-4 w-4 text-purple-400\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-white\">{stats.peakCount}명</div>\n                <p className=\"text-xs text-white/60\">최대 동시 참여자</p>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <div className=\"glass-card max-w-md mx-auto\">\n              <h3 className=\"text-xl font-semibold text-white mb-2\">통계 데이터 없음</h3>\n              <p className=\"text-white/70\">아직 충분한 데이터가 없습니다. 게임을 예약해보세요!</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n"
                }
            }
        }
    },
    "components": {
        "__files__": {
            "auth-provider.tsx": "\"use client\"\n\nimport type React from \"react\"\n\nimport { createContext, useContext, useEffect, useState } from \"react\"\nimport { useRouter, usePathname } from \"next/navigation\"\nimport { authService } from \"@/lib/auth-service\"\n\ninterface AuthContextType {\n  user: string | null\n  isLoading: boolean\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  isLoading: true,\n})\n\nexport const useAuth = () => useContext(AuthContext)\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const router = useRouter()\n  const pathname = usePathname()\n\n  useEffect(() => {\n    const token = authService.getToken()\n    const currentUser = authService.getCurrentUser()\n\n    if (token && currentUser) {\n      setUser(currentUser)\n    } else if (!pathname.startsWith(\"/auth\")) {\n      // router.push(\"/auth/login\")\n    }\n\n    setIsLoading(false)\n  }, [pathname, router])\n\n  return <AuthContext.Provider value={{ user, isLoading }}>{children}</AuthContext.Provider>\n}\n",
            "ChangeNicknameModal.tsx": "\"use client\"\n\nimport { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogTrigger,\n  DialogClose,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { toast } from \"sonner\";\nimport { authService } from \"@/lib/auth-service\";\nimport { Settings as SettingsIcon } from \"lucide-react\";\n\nexport function ChangeNicknameModal() {\n  const [open, setOpen] = useState(false);\n  const [nickname, setNickname] = useState(authService.getCurrentUser() || \"\");\n  const [loading, setLoading] = useState(false);\n\n  const save = async () => {\n    setLoading(true);\n    try {\n      // API 호출\n      const res = await fetch(\n        `${process.env.NEXT_PUBLIC_API_URL}/users/me/nickname`,\n        {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            ...authService.getAuthHeaders(),\n          },\n          body: JSON.stringify({ nickname }),\n        }\n      );\n      if (!res.ok) throw new Error();\n      // 로컬 저장\n      authService.setCurrentUser({ id: authService.getCurrentUserId()!, nickname });\n      toast.success('닉네임이 변경되었습니다');\n      setOpen(false);\n    } catch {\n      toast.error('닉네임 변경에 실패했습니다');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"text-white hover:bg-white/20\"\n        >\n          <SettingsIcon className=\"h-5 w-5 text-white\" />\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"glass border-white/20 max-w-sm\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">닉네임 변경</DialogTitle>\n        </DialogHeader>\n        <div className=\"p-4\">\n          <Input\n            value={nickname}\n            onChange={e => setNickname(e.target.value)}\n            className=\"glass border-white/30 text-white\"\n          />\n        </div>\n        <DialogFooter>\n          <DialogClose asChild>\n            <Button variant=\"outline\">취소</Button>\n          </DialogClose>\n          <Button onClick={save} disabled={loading}>\n            {loading ? '저장 중...' : '저장'}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
            "create-server-modal.tsx": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { toast } from \"sonner\"\nimport { serverService } from \"@/lib/server-service\"\nimport { Loader2 } from \"lucide-react\"\n\ninterface CreateServerModalProps {\n  open: boolean\n  onClose: () => void\n  onServerCreated: (server: any) => void\n}\n\nexport function CreateServerModal({ open, onClose, onServerCreated }: CreateServerModalProps) {\n  const [name, setName] = useState(\"\")\n  const [resetTime, setResetTime] = useState(\"06:00\")\n  const [isLoading, setIsLoading] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      const server = await serverService.createServer({\n        name,\n        resetTime,\n      })\n      onServerCreated(server)\n      setName(\"\")\n      setResetTime(\"06:00\")\n    } catch (error) {\n      toast.error(\"서버 생성 실패\", {\n        description: \"서버 생성 중 오류가 발생했습니다.\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"glass border-white/20\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">새 서버 생성</DialogTitle>\n          <DialogDescription className=\"text-white/70\">새로운 게임 서버를 생성합니다.</DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\" className=\"text-white\">\n              서버 이름\n            </Label>\n            <Input\n              id=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              className=\"glass border-white/30 text-white placeholder:text-white/50\"\n              placeholder=\"서버 이름을 입력하세요\"\n              required\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"resetTime\" className=\"text-white\">\n              초기화 시간\n            </Label>\n            <Input\n              id=\"resetTime\"\n              type=\"time\"\n              value={resetTime}\n              onChange={(e) => setResetTime(e.target.value)}\n              className=\"glass border-white/30 text-white\"\n              required\n            />\n          </div>\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"glass-button\"\n            >\n              취소\n            </Button>\n            <Button type=\"submit\" className=\"glass-button\" disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  생성 중...\n                </>\n              ) : (\n                \"생성\"\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n",
            "Footer.tsx": "// components/Footer.tsx\n\"use client\"\n\nimport React from \"react\"\n\nexport function Footer() {\n  return (\n    <footer className=\"w-full py-4 text-center text-gray-400 text-sm bg-gradient-to-t from-black/30 to-transparent mt-auto\">\n      <div>© {new Date().getFullYear()} GameSync. All rights reserved.</div>\n      <div>\n        오류 문의:{\" \"}\n        <a\n          href=\"mailto:bugs@gamesync.example.com\"\n          className=\"hover:text-blue-300\"\n        >\n          gy255318@gmail.com\n        </a>\n      </div>\n      <div>Thanks to. SS, YC</div>\n    </footer>\n  )\n}\n",
            "game-management.tsx": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { toast } from \"sonner\"\nimport { gameService } from \"@/lib/game-service\"\nimport { Plus, Trash2, Gamepad2 } from \"lucide-react\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/ui/dialog\"\n\ninterface Game {\n  id: number\n  name: string\n}\n\ninterface GameManagementProps {\n  serverId: number\n}\n\nexport function GameManagement({ serverId }: GameManagementProps) {\n  const [defaultGames, setDefaultGames] = useState<Game[]>([])\n  const [customGames, setCustomGames] = useState<Game[]>([])\n  const [newGameName, setNewGameName] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(true)\n\n  // Deletion modal state\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const [deletingGameId, setDeletingGameId] = useState<number | null>(null)\n  const [deletingGameName, setDeletingGameName] = useState<string>(\"\")\n  const [scheduledUsers, setScheduledUsers] = useState<string[]>([])\n\n  useEffect(() => {\n    loadGames()\n  }, [serverId])\n\n  const loadGames = async () => {\n    setIsLoading(true)\n    try {\n      const [defaultData, customData] = await Promise.all([\n        gameService.getDefaultGames(),\n        gameService.getCustomGames(serverId),\n      ])\n      setDefaultGames(defaultData.defaultGames)\n      setCustomGames(customData.customGames)\n    } catch {\n      toast.error(\"게임 목록 로드 실패\", {\n        description: \"게임 목록을 불러오는데 실패했습니다.\",\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleAddCustomGame = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!newGameName.trim()) return\n    try {\n      const newGame = await gameService.addCustomGame(serverId, {\n        name: newGameName,\n      })\n      setCustomGames((prev) => [...prev, newGame])\n      setNewGameName(\"\")\n      toast.success(\"게임 추가 완료\", {\n        description: `${newGame.name}이 추가되었습니다.`,\n      })\n    } catch {\n      toast.error(\"게임 추가 실패\", {\n        description: \"게임 추가 중 오류가 발생했습니다.\",\n      })\n    }\n  }\n\n  const requestDeleteCustomGame = async (gameId: number, gameName: string) => {\n    try {\n      const data = await gameService.getScheduledUsers(serverId, gameId)\n      const users = data.users.map((u) => u.username)\n\n      if (users.length > 0) {\n        // 예약된 사용자가 있을 때만 모달 표시\n        setScheduledUsers(users)\n        setDeletingGameId(gameId)\n        setDeletingGameName(gameName)\n        setShowDeleteModal(true)\n      } else {\n        // 예약된 사용자가 없으면 바로 삭제\n        await gameService.deleteCustomGame(serverId, gameId)\n        setCustomGames((prev) => prev.filter((g) => g.id !== gameId))\n        toast.success(\"게임 삭제 완료\", {\n          description: `${gameName}이 삭제되었습니다.`,\n        })\n      }\n    } catch {\n      toast.error(\"예약자 조회 실패\", {\n        description: \"예약된 사용자를 불러오는데 실패했습니다.\",\n      })\n    }\n  }\n\n  const confirmDelete = async () => {\n    if (deletingGameId == null) return\n    try {\n      await gameService.deleteCustomGame(serverId, deletingGameId)\n      setCustomGames((prev) =>\n        prev.filter((g) => g.id !== deletingGameId)\n      )\n      toast.success(\"게임 삭제 완료\", {\n        description: `${deletingGameName}과 예약 기록이 삭제되었습니다.`,\n      })\n    } catch {\n      toast.error(\"게임 삭제 실패\", {\n        description: \"게임 삭제 중 오류가 발생했습니다.\",\n      })\n    } finally {\n      setShowDeleteModal(false)\n      setDeletingGameId(null)\n      setDeletingGameName(\"\")\n      setScheduledUsers([])\n    }\n  }\n\n  if (isLoading) {\n    return (\n      <Card className=\"glass border-white/20 h-full\">\n        <CardHeader>\n          <CardTitle className=\"text-black flex items-center\">\n            <Gamepad2 className=\"mr-2 h-5 w-5\" /> 게임 관리\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div>로딩 중...</div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <>\n      <Card className=\"glass border-white/20 h-full flex flex-col\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Gamepad2 className=\"mr-2 h-5 w-5\" /> 게임 관리\n          </CardTitle>\n          <CardDescription className=\"text-white/70\">\n            기본 게임과 커스텀 게임을 관리하세요\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6 flex-grow\">\n          <h3 className=\"text-white font-medium mb-3\">커스텀 게임</h3>\n          <form\n            onSubmit={handleAddCustomGame}\n            className=\"flex gap-2 mb-3\"\n          >\n            <Input\n              value={newGameName}\n              onChange={(e) => setNewGameName(e.target.value)}\n              placeholder=\"게임 이름\"\n              className=\"glass border-white/30 text-white placeholder:text-white/50 text-sm\"\n            />\n            <Button\n              type=\"submit\"\n              size=\"sm\"\n              className=\"glass-button hover:bg-black/10\"\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </form>\n          <div className=\"space-y-2 max-h-48 overflow-y-auto overflow-x-hidden\">\n            {customGames.map((game) => (\n              <div\n                key={game.id}\n                className=\"flex items-center justify-between p-2 glass rounded-lg hover:bg-black/10\"\n              >\n                <span className=\"text-white text-sm truncate w-40\">\n                  {game.name}\n                </span>\n                <Button\n                  onClick={() =>\n                    requestDeleteCustomGame(game.id, game.name)\n                  }\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"text-red-400 truncate hover:text-red-300 hover:bg-red-500/20\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* 삭제 확인 모달 */}\n      <Dialog\n        open={showDeleteModal}\n        onOpenChange={setShowDeleteModal}\n      >\n        <DialogContent className=\"glass border-white/20 max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">\n              {deletingGameName} 삭제 확인\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4 text-white\">\n            <p>다음 사용자가 예약한 기록이 있습니다:</p>\n            <ul className=\"list-disc list-inside mt-2 space-y-1\">\n              {scheduledUsers.map((user) => (\n                <li key={user}>{user}</li>\n              ))}\n            </ul>\n            <p className=\"mt-4\">정말로 삭제하시겠습니까?</p>\n          </div>\n          <DialogFooter>\n            <DialogClose asChild>\n              <Button\n                variant=\"outline\"\n                className=\"glass border-white/30 text-white\"\n              >\n                취소\n              </Button>\n            </DialogClose>\n            <Button\n              onClick={confirmDelete}\n              className=\"glass-button text-white\"\n            >\n              예, 삭제합니다\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n",
            "GameSyncLanding.tsx": "// components/GameSyncLanding.tsx\n'use client'\n\nimport { useState, useEffect } from 'react'\nimport Link from 'next/link'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Gamepad2,\n  Calendar,\n  RefreshCw,\n  Users,\n  BarChart3,\n  Star,\n  ArrowRight,\n  Clock,\n  Zap,\n} from 'lucide-react'\n\nexport default function GameSyncLanding() {\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    setIsVisible(true)\n  }, [])\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#4B0082] via-[#1E3A8A] to-[#312E81] text-white font-['Inter'] overflow-x-hidden\">\n      {/* Header */}\n      <header className=\"relative z-50 px-4 py-6\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-xl bg-white/10 backdrop-blur-sm border border-white/20\">\n              <Gamepad2 className=\"w-6 h-6 text-white\" />\n            </div>\n            <span className=\"text-2xl font-bold\">GameSync</span>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Link href=\"/auth/login\" passHref>\n              <Button variant=\"ghost\" className=\"text-white hover:bg-white/10 backdrop-blur-sm border border-white/20\">\n                로그인\n              </Button>\n            </Link>\n            <Link href=\"/auth/signup\" passHref>\n              <Button className=\"bg-white/20 hover:bg-white/30 backdrop-blur-sm border border-white/30 text-white\">\n                회원가입\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative px-4 py-20\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <div className={`transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>\n            <Badge className=\"mb-6 bg-white/10 backdrop-blur-sm border border-white/20 text-white hover:bg-white/20\">\n              <Zap className=\"w-4 h-4 mr-2\" />\n              새로운 게임 예약 플랫폼\n            </Badge>\n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 leading-tight\">\n              팀원들과 간편하게\n              <br />\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                게임 시간을 예약하세요\n              </span>\n            </h1>\n            <p className=\"text-xl md:text-2xl text-white/80 mb-8 max-w-2xl mx-auto leading-relaxed\">\n              GameSync는 일정 공유, 초대 코드, 자동 초기화 기능을 제공하여 팀 게임을 더욱 쉽게 만들어줍니다.\n            </p>\n            <Link href=\"/auth/signup\" passHref>\n              <Button\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-8 py-4 text-lg font-semibold rounded-xl shadow-2xl hover:shadow-blue-500/25 transition-all duration-300 transform hover:scale-105\"\n              >\n                지금 시작하기\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"relative px-4 py-20\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className={`text-center mb-16 transition-all duration-1000 delay-300 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">왜 GameSync를 사용하나요?</h2>\n            <p className=\"text-xl text-white/70 max-w-2xl mx-auto\">\n              게이머들을 위해 특별히 설계된 강력한 기능들을 만나보세요\n            </p>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[\n              {\n                icon: Calendar,\n                title: '예약 관리',\n                description: '원하는 시간에 게임 합류 일정을 간편하게 등록하고 관리하세요',\n                delay: 'delay-500',\n              },\n              {\n                icon: RefreshCw,\n                title: '자동 초기화',\n                description: '매일 지정된 시각에 자동으로 리셋되어 항상 깔끔한 상태를 유지합니다',\n                delay: 'delay-700',\n              },\n              {\n                icon: Users,\n                title: '초대 코드',\n                description: '간단한 코드 하나로 팀원들을 쉽게 초대하고 참여할 수 있습니다',\n                delay: 'delay-900',\n              },\n              {\n                icon: BarChart3,\n                title: '통계 대시보드',\n                description: '인기 게임과 피크 시간을 분석하여 최적의 게임 시간을 찾아보세요',\n                delay: 'delay-1100',\n              },\n            ].map((feature, idx) => (\n              <Card\n                key={idx}\n                className={`bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/20 transition-all duration-500 hover:scale-105 hover:shadow-2xl hover:shadow-blue-500/10 ${feature.delay} ${\n                  isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'\n                }`}\n              >\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"mb-4 p-3 rounded-xl bg-gradient-to-br from-blue-500/20 to-purple-600/20 w-fit mx-auto\">\n                    <feature.icon className=\"w-8 h-8 text-blue-300\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3 text-white\">{feature.title}</h3>\n                  <p className=\"text-white/70 leading-relaxed\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Demo Section */}\n      <section className=\"relative px-4 py-20\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className={`text-center mb-16 transition-all duration-1000 delay-1300 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">실제 대시보드를 미리 체험해보세요</h2>\n            <p className=\"text-xl text-white/70\">직관적인 인터페이스로 누구나 쉽게 사용할 수 있습니다</p>\n          </div>\n          <Card\n            className={`bg-white/5 backdrop-blur-sm border border-white/20 overflow-hidden transition-all duration-1000 delay-1500 ${\n              isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'\n            }`}\n          >\n            <CardContent className=\"p-8\">\n              <div className=\"bg-gradient-to-br from-slate-900/50 to-slate-800/50 rounded-xl p-6 min-h-[400px] flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"mb-6 p-4 rounded-full bg-white/10 w-fit mx-auto\">\n                    <Gamepad2 className=\"w-12 h-12 text-blue-300\" />\n                  </div>\n                  <h3 className=\"text-2xl font-semibold mb-4\">대시보드 미리보기</h3>\n                  <p className=\"text-white/70 mb-6 leading-relaxed\">\n                    실시간 게임 일정, 팀원 현황, 통계 등을 한눈에 확인할 수 있는\n                    <br />\n                    직관적인 대시보드를 제공합니다\n                  </p>\n                  <div className=\"flex items-center justify-center gap-4 text-sm text-white/60\">\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"w-4 h-4\" />\n                      실시간 업데이트\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Users className=\"w-4 h-4\" />\n                      팀원 관리\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      상세 통계\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n\n\n{/* CTA Section */}\n<section className=\"relative px-4 py-20\">\n  <div className=\"max-w-4xl mx-auto text-center\">\n    <Card\n      className={`bg-gradient-to-br from-purple-700/30 via-blue-800/30 to-indigo-900/30 backdrop-blur-sm border border-white/10 transition-all duration-1000 delay-2500 ${\n        isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'\n      }`}\n    >\n      <CardContent className=\"p-12\">\n        <h2 className=\"text-4xl md:text-5xl font-bold mb-6 text-white\">\n          지금 바로 시작해보세요!\n        </h2>\n        <p className=\"text-xl text-white/80 mb-8 max-w-2xl mx-auto\">\n          GameSync와 함께 더 체계적이고 즐거운 게임 라이프를 경험해보세요. 무료로 시작할 수 있습니다.\n        </p>\n        <Link href=\"/auth/signup\" passHref>\n          <Button\n            size=\"lg\"\n            className=\"bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-12 py-4 text-xl font-semibold rounded-xl shadow-lg hover:shadow-indigo-800/50 transition-all duration-300 transform hover:scale-105\"\n          >\n            무료로 시작하기\n            <ArrowRight className=\"w-6 h-6 ml-2\" />\n          </Button>\n        </Link>\n      </CardContent>\n    </Card>\n  </div>\n</section>\n\n    </div>\n  )\n}\n",
            "join-by-code-modal.tsx": "// components/join-by-code-modal.tsx\n\"use client\"\n\nimport React, { useState } from \"react\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { toast } from \"sonner\"\nimport { serverService } from \"@/lib/server-service\"\n\ninterface JoinByCodeModalProps {\n  open: boolean\n  onClose: () => void\n  onJoinSuccess: () => void\n}\n\nexport function JoinByCodeModal({ open, onClose, onJoinSuccess }: JoinByCodeModalProps) {\n  const [code, setCode] = useState<string>(\"\")\n\n  const handleJoin = async () => {\n    try {\n      await serverService.joinByCode(code)\n      toast.success(\"서버 참가 완료\")\n      onJoinSuccess()\n      onClose()\n    } catch {\n      toast.error(\"초대 코드가 올바르지 않습니다\")\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"glass border-white/20 max-w-sm\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white\">초대 코드로 가입</DialogTitle>\n        </DialogHeader>\n        <div className=\"p-4\">\n          <Input\n            placeholder=\"초대 코드 (6자리)\"\n            value={code}\n            onChange={(e) => setCode(e.target.value.toUpperCase())}\n            maxLength={6}\n            className=\"glass border-white/30 text-white\"\n          />\n        </div>\n        <DialogFooter>\n          <DialogClose asChild>\n            <Button variant=\"outline\" className=\"glass border-white/30 text-white\">취소</Button>\n          </DialogClose>\n          <Button onClick={handleJoin} className=\"glass-button text-white\">참가</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}\n",
            "navbar.tsx": "\"use client\"\n\nimport Link from \"next/link\"\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { authService } from \"@/lib/auth-service\"\nimport { GamepadIcon, Home, LogOut, Bell } from \"lucide-react\"\nimport { ChangeNicknameModal } from \"@/components/ChangeNicknameModal\"\n\nexport function Navbar() {\n  const [user, setUser] = useState<string | null>(null)\n\n  useEffect(() => {\n    // 클라이언트에서만 실행\n    const nickname = authService.getCurrentUser()\n    setUser(nickname)\n  }, [])\n\n  const handleLogout = async () => {\n    try {\n      await authService.logout()\n      window.location.href = \"/auth/login\"\n    } catch {\n      console.error(\"Logout failed\")\n    }\n  }\n\n  return (\n    <nav className=\"glass border-b border-white/20\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          <Link href=\"/dashboard\" className=\"flex items-center space-x-2\">\n            <GamepadIcon className=\"h-8 w-8 text-white\" />\n            <span className=\"text-xl font-bold text-white\">GameSync</span>\n          </Link>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* 닉네임 표시: 클라이언트 마운트 후 렌더링 */}\n            {user && <span className=\"text-white font-medium\">{user}</span>}\n            {/* 닉네임 변경 모달 트리거 */}\n            {/* 알림 아이콘 */}\n            <Button variant=\"ghost\" size=\"icon\" className=\"relative text-white hover:bg-white/20 hover:text-white\">\n              <Bell className=\"h-5 w-5\" />\n              <span className=\"absolute top-1 right-1 h-2 w-2 rounded-full bg-red-500\" />\n            </Button>\n            <ChangeNicknameModal />\n            {/* 로그아웃 */}\n            <Button onClick={handleLogout} variant=\"ghost\" className=\"text-white hover:bg-white/20 hover:text-white\">\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              로그아웃\n            </Button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  )\n}\n",
            "search-server-modal.tsx": "// \"use client\"\n\n// import React, { useState, useEffect, useRef } from \"react\"\n// import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\n// import { Input } from \"@/components/ui/input\"\n// import { Button } from \"@/components/ui/button\"\n// import { toast } from \"sonner\"\n// import { serverService } from \"@/lib/server-service\"\n\n// interface Server {\n//   id: number\n//   name: string\n//   owner: string\n//   members: string[]\n//   resetTime: string\n// }\n\n// interface Props {\n//   open: boolean\n//   onClose: () => void\n//   onJoinSuccess: () => void\n// }\n\n// export function SearchServerModal({ open, onClose, onJoinSuccess }: Props) {\n//   const [list, setList] = useState<Server[]>([])\n//   const [page, setPage] = useState(0)\n//   const [query, setQuery] = useState(\"\")\n//   const containerRef = useRef<HTMLDivElement>(null)\n\n//   const load = async (reset = false) => {\n//     try {\n//       const data = await serverService.searchServers({ page, size: 10, q: query || undefined })\n//       setList(prev => (reset ? data : [...prev, ...data]))\n//     } catch {\n//       toast.error(\"검색 실패\", { description: \"서버 검색 중 오류가 발생했습니다.\" })\n//     }\n//   }\n\n//   useEffect(() => {\n//     if (open) {\n//       setPage(0)\n//       load(true)\n//     }\n//   }, [open, query])\n\n//   useEffect(() => {\n//     if (page > 0) load()\n//   }, [page])\n\n//   const onScroll = () => {\n//     const el = containerRef.current\n//     if (el && el.scrollTop + el.clientHeight >= el.scrollHeight - 10) {\n//       setPage(prev => prev + 1)\n//     }\n//   }\n\n//   const handleJoin = async (id: number) => {\n//     try {\n//       await serverService.joinServer(id)\n//       toast.success(\"참가 완료\", { description: \"서버 참가에 성공했습니다.\" })\n//       onJoinSuccess()\n//       onClose()\n//     } catch {\n//       toast.error(\"참가 실패\", { description: \"서버 참가에 실패했습니다.\" })\n//     }\n//   }\n\n//   return (\n//     <Dialog open={open} onOpenChange={onClose}>\n//       <DialogContent className=\"glass border-white/20\">\n//         <DialogHeader>\n//           <DialogTitle className=\"text-white\">서버 찾기</DialogTitle>\n//         </DialogHeader>\n//         <div className=\"p-4\">\n//           <Input\n//             placeholder=\"서버 이름으로 검색\"\n//             value={query}\n//             onChange={e => setQuery(e.target.value)}\n//             className=\"glass border-white/30 text-white mb-4\"\n//           />\n//           <div ref={containerRef} onScroll={onScroll} className=\"max-h-64 overflow-y-auto space-y-2\">\n//             {list.map(s => (\n//               <div key={s.id} className=\"flex items-center justify-between p-2 glass rounded-lg\">\n//                 <span className=\"text-white\">{s.name}</span>\n//                 <Button size=\"sm\" onClick={() => handleJoin(s.id)} className=\"glass-button\">\n//                   참가\n//                 </Button>\n//               </div>\n//             ))}\n//             {list.length === 0 && <div className=\"text-center text-white/60\">검색 결과가 없습니다.</div>}\n//           </div>\n//         </div>\n//       </DialogContent>\n//     </Dialog>\n//   )\n// }\n",
            "server-overview.tsx": "\"use client\"\n\nimport React, { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter,\n} from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { toast } from \"sonner\"\nimport { Users, Crown, Settings as SettingsIcon, BarChart3 } from \"lucide-react\"\nimport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n} from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { authService } from \"@/lib/auth-service\"\nimport { serverService, Server, MemberInfo } from \"@/lib/server-service\"\n\n// Props 타입 정의\ninterface ServerOverviewProps {\n  server: Server\n  onServerUpdate: (srv: Server) => void\n}\n\nexport function ServerOverview({\n  server,\n  onServerUpdate,\n}: ServerOverviewProps) {\n  const router = useRouter()\n  const currentUserId = authService.getCurrentUserId()\n  const isOwner = server.ownerId === currentUserId\n  const isAdmin = server.admins.some((a) => a.id === currentUserId)\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [showSettings, setShowSettings] = useState(false)\n  const [newName, setNewName] = useState(server.name)\n  const [newResetTime, setNewResetTime] = useState(server.resetTime)\n\n  // 멤버 강퇴 핸들러\n  async function handleKickMember(member: MemberInfo) {\n    if (!confirm(`${member.nickname}을(를) 강퇴하시겠습니까?`)) return\n    setIsLoading(true)\n    try {\n      await serverService.kickMember(server.id, member.id)\n      toast.success(\"멤버 강퇴 완료\")\n      const updated = await serverService.getServer(server.id)\n      onServerUpdate(updated)\n    } catch {\n      toast.error(\"강퇴 실패\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // 관리자 임명 핸들러\n  async function handleGrantAdmin(member: MemberInfo) {\n    if (!confirm(`${member.nickname}을(를) 관리자로 임명하시겠습니까?`)) return\n    setIsLoading(true)\n    try {\n      await serverService.updateAdmin(server.id, member.id, true)\n      toast.success(\"관리자 임명 완료\")\n      const updated = await serverService.getServer(server.id)\n      onServerUpdate(updated)\n    } catch {\n      toast.error(\"관리자 임명 실패\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // 관리자 해임 핸들러\n  async function handleRevokeAdmin(member: MemberInfo) {\n    if (!confirm(`${member.nickname} 관리자 권한을 해임하시겠습니까?`)) return\n    setIsLoading(true)\n    try {\n      await serverService.updateAdmin(server.id, member.id, false)\n      toast.success(\"관리자 해임 완료\")\n      const updated = await serverService.getServer(server.id)\n      onServerUpdate(updated)\n    } catch {\n      toast.error(\"관리자 해임 실패\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // 설정 저장 핸들러\n  async function handleSaveSettings() {\n    setIsLoading(true)\n    try {\n      if (newName !== server.name) {\n        await serverService.renameServer(server.id, newName)\n      }\n      if (newResetTime !== server.resetTime) {\n        await serverService.updateResetTime(server.id, newResetTime)\n      }\n      toast.success(\"설정 저장 완료\")\n      const updated = await serverService.getServer(server.id)\n      onServerUpdate(updated)\n      setShowSettings(false)\n    } catch {\n      toast.error(\"설정 저장 실패\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // 서버 삭제 핸들러 (소유자 전용)\n  async function handleDeleteServer() {\n    if (!confirm(\"정말 서버를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.\")) return\n    setIsLoading(true)\n    try {\n      await serverService.deleteServer(server.id)\n      toast.success(\"서버가 삭제되었습니다\")\n      router.push(\"/dashboard\")\n    } catch {\n      toast.error(\"서버 삭제 실패\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Card className=\"glass border-white/20 h-full flex flex-col\">\n      <CardHeader>\n        <CardTitle className=\"text-white flex items-center\">\n          <Users className=\"mr-2 h-5 w-5 text-white\" /> 서버 개요\n        </CardTitle>\n        <CardDescription className=\"text-white/70\">\n          서버 정보와 멤버를 관리합니다\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6 flex-grow\">\n        {/* 서버 기본 정보 */}\n        <div className=\"space-y-3\">\n          <h3 className=\"text-white font-medium\">서버 정보</h3>\n          <div className=\"space-y-2 text-sm text-white/70\">\n            <div className=\"flex justify-between\">\n              <span>서버 이름:</span>\n              <span>{server.name}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>초기화 시간:</span>\n              <span>{server.resetTime}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>총 멤버:</span>\n              <span>{server.members.length}명</span>\n            </div>\n          </div>\n        </div>\n\n        {/* 멤버 목록 */}\n        <div className=\"space-y-3\">\n          <h3 className=\"text-white font-medium\">멤버 목록</h3>\n          <div className=\"space-y-2 max-h-48 overflow-y-auto overflow-x-hidden\">\n            {server.members.map((member) => (\n              <div\n                key={member.id}\n                className=\"flex items-center justify-between px-3 py-2 glass rounded-lg hover:bg-black/10\"\n              >\n                {/* 닉네임 왼쪽 */}\n                <span className=\"text-white text-sm truncate w-32\">\n                  {member.nickname}\n                </span>\n\n                {/* 왕관 및 액션 버튼 우측 */}\n                <div className=\"flex items-center space-x-2\">\n                  {member.id === server.ownerId && (\n                    <Crown className=\"h-4 w-4 text-yellow-400\" />\n                  )}\n                  {server.admins.some((a) => a.id === member.id) &&\n                    member.id !== server.ownerId && (\n                      <Crown className=\"h-4 w-4 text-blue-400\" />\n                    )}\n\n                  {/* 소유자 또는 관리자만 액션 */}\n                  {(isOwner || isAdmin) && member.id !== server.ownerId && (\n                    <>\n                      {/* 임명/해임 (소유자만) */}\n                      {!server.admins.some((a) => a.id === member.id) && isOwner && (\n                        <Button\n                          onClick={() => handleGrantAdmin(member)}\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"text-blue-400 truncate hover:text-blue-300 hover:bg-blue-500/20\"\n                          disabled={isLoading}\n                        >\n                          임명\n                        </Button>\n                      )}\n                      {server.admins.some((a) => a.id === member.id) && isOwner && (\n                        <Button\n                          onClick={() => handleRevokeAdmin(member)}\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"text-gray-400 truncate hover:text-gray-300 hover:bg-gray-500/20\"\n                          disabled={isLoading}\n                        >\n                          해임\n                        </Button>\n                      )}\n\n                      {/* 강퇴: 관리자에게는 표시하지 않음 */}\n                      {!server.admins.some((a) => a.id === member.id) && (\n                        <Button\n                          onClick={() => handleKickMember(member)}\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"text-red-400 truncate hover:text-red-300 hover:bg-red-500/20\"\n                          disabled={isLoading}\n                        >\n                          강퇴\n                        </Button>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* 통계 및 설정 버튼 */}\n        <div className=\"space-y-2 p-4\">\n          <Button\n            variant=\"outline\"\n             className=\"w-full glass border-white/30 text-white hover:bg-black/10 hover:text-white\"\n            onClick={() => router.push(`/stats/${server.id}`)}\n          >\n            <BarChart3 className=\"mr-2 h-4 w-4 text-white\" /> 통계 보기\n          </Button>\n          {(isOwner || isAdmin) && (\n            <Dialog open={showSettings} onOpenChange={setShowSettings}>\n              <DialogTrigger asChild>\n                <Button  className=\"w-full glass border-white/30 text-white hover:bg-black/10 hover:text-white\">\n                  <SettingsIcon className=\"mr-2 h-4 w-4 text-white\" /> 서버 설정\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"glass border-white/20 max-w-md\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-white\">서버 설정</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"srv-name\" className=\"text-white\">\n                      서버 이름\n                    </Label>\n                    <Input\n                      id=\"srv-name\"\n                      value={newName}\n                      onChange={(e) => setNewName(e.target.value)}\n                      className=\"glass border-white/30 text-white\"\n                    />\n                  </div>\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"srv-reset\" className=\"text-white\">\n                      초기화 시간\n                    </Label>\n                    <Input\n                      id=\"srv-reset\"\n                      type=\"time\"\n                      value={newResetTime}\n                      onChange={(e) => setNewResetTime(e.target.value)}\n                      className=\"glass border-white/30 text-white\"\n                    />\n                  </div>\n                </div>\n                <DialogFooter>\n                  <DialogClose asChild>\n                    <Button\n                      variant=\"outline\"\n                      className=\"glass border-white/30 hover:bg-black/10\"\n                    >\n                      취소\n                    </Button>\n                  </DialogClose>\n                  <Button\n                    onClick={handleSaveSettings}\n                    className=\"glass-button text-white\"\n                    disabled={isLoading}\n                  >\n                    저장\n                  </Button>\n                </DialogFooter>\n                {isOwner && (\n                  <div className=\"mt-4 border-t border-white/20 pt-4\">\n                    <Button\n                      variant=\"destructive\"\n                      className=\"w-full\"\n                      onClick={handleDeleteServer}\n                      disabled={isLoading}\n                    >\n                      서버 삭제\n                    </Button>\n                  </div>\n                )}\n              </DialogContent>\n            </Dialog>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
            "timetable-view.tsx": "\"use client\"\n\nimport type React from \"react\"\nimport { useState, useEffect, useMemo } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  Select,\n  SelectGroup,\n  SelectLabel,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { toast } from \"sonner\"\nimport { timetableService } from \"@/lib/timetable-service\"\nimport { gameService } from \"@/lib/game-service\"\nimport { serverService } from \"@/lib/server-service\"\nimport { Calendar, Clock, Filter, Users, GamepadIcon } from \"lucide-react\"\n\ninterface TimetableEntry {\n  id: number\n  user: string\n  slot: string\n  gameId: number\n  gameName: string\n  custom: boolean\n}\n\ninterface Game {\n  id: number\n  name: string\n}\n\ninterface TimetableViewProps {\n  serverId: number\n}\n\ninterface UserSchedule {\n  user: string\n  joinTime: number // 시간 (0-23)\n  gameName: string\n  custom: boolean\n  entry: TimetableEntry\n}\n\nexport function TimetableView({ serverId }: TimetableViewProps) {\n  const today = new Date().toLocaleDateString(\"en-CA\");\n  const [entries, setEntries] = useState<TimetableEntry[]>([])\n  const [defaultGames, setDefaultGames] = useState<Game[]>([])\n  const [customGames, setCustomGames] = useState<Game[]>([])\n  const [selectedDate, setSelectedDate] = useState<string>(today)\n  const [selectedTime, setSelectedTime] = useState<string>(\"\")\n  const [selectedGame, setSelectedGame] = useState<string>(\"\")\n  const [gameFilter, setGameFilter] = useState<string>(\"\")\n  const [sortByGame, setSortByGame] = useState<boolean>(false)\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n  const [hoveredUser, setHoveredUser] = useState<string | null>(null)\n  const [resetHour, setResetHour] = useState<number | null>(null)\n\n  // 사용자별 스케줄 데이터 처리\n  const userSchedules = useMemo(() => {\n    const schedules: UserSchedule[] = entries.map((entry) => {\n      const date = new Date(entry.slot)\n      const joinTime = date.getHours()\n      return {\n        user: entry.user,\n        joinTime,\n        gameName: entry.gameName,\n        custom: entry.custom,\n        entry,\n      }\n    })\n\n    // 합류 시간 순으로 정렬\n    return schedules.sort((a, b) => a.joinTime - b.joinTime)\n  }, [entries])\n\n  // 시간 배열 생성 (0-23)\n  const hours = Array.from({ length: 24 }, (_, i) => i)\n\n  useEffect(() => {\n    loadData()\n  }, [serverId])\n\n  useEffect(() => {\n    loadTimetable()\n  }, [gameFilter, sortByGame])\n\n  const loadData = async () => {\n    try {\n      const [defaultData, customData] = await Promise.all([\n        gameService.getDefaultGames(),\n        gameService.getCustomGames(serverId),\n      ])\n      setDefaultGames(defaultData.defaultGames)\n      setCustomGames(customData.customGames)\n\n      const serverInfo = await serverService.getServer(serverId)\n      const hourPart = serverInfo.resetTime.split(\":\")[0]\n      setResetHour(Number(hourPart))\n\n      await loadTimetable()\n    } catch {\n      toast.error(\"데이터 로드 실패\", { description: \"데이터를 불러오는데 실패했습니다.\" })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const loadTimetable = async () => {\n    try {\n      const data = await timetableService.getTimetable(serverId, gameFilter, sortByGame)\n      setEntries(data)\n    } catch {\n      toast.error(\"타임테이블 로드 실패\", { description: \"타임테이블을 불러오는데 실패했습니다.\" })\n    }\n  }\n\n  const handleAddEntry = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (!selectedDate || !selectedTime || !selectedGame) {\n      toast.error(\"입력 오류\", { description: \"모든 필드를 입력해주세요.\" })\n      return\n    }\n\n    const slot = `${selectedDate}T${selectedTime}:00`\n    const [gameType, gameId] = selectedGame.split(\"-\")\n\n    try {\n      await timetableService.addEntry({\n        serverId,\n        slot,\n        defaultGameId: gameType === \"default\" ? Number(gameId) : undefined,\n        customGameId: gameType === \"custom\" ? Number(gameId) : undefined,\n      })\n      await loadTimetable()\n      setSelectedDate(today)\n      setSelectedTime(\"\")\n      setSelectedGame(\"\")\n      toast.success(\"예약 완료\", { description: \"게임이 예약되었습니다.\" })\n    } catch {\n      toast.error(\"예약 실패\", { description: \"게임 예약 중 오류가 발생했습니다.\" })\n    }\n  }\n\n  const formatDateTime = (dateTime: string) => {\n    return new Date(dateTime).toLocaleString(\"ko-KR\", {\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    })\n  }\n\n  // 특정 시간에 해당 사용자가 온라인인지 확인\n  const isUserOnlineAtHour = (schedule: UserSchedule, hour: number) => {\n    return hour >= schedule.joinTime\n  }\n\n  // 사용자별 색상 생성 (랜덤)\n  const getUserColor = (user: string, custom: boolean) => {\n    const colors = [\n      \"from-blue-500/60 to-blue-600/40 border-blue-400/60\",\n      \"from-green-500/60 to-green-600/40 border-green-400/60\",\n      \"from-purple-500/60 to-purple-600/40 border-purple-400/60\",\n      \"from-orange-500/60 to-orange-600/40 border-orange-400/60\",\n      \"from-pink-500/60 to-pink-600/40 border-pink-400/60\",\n      \"from-cyan-500/60 to-cyan-600/40 border-cyan-400/60\",\n      \"from-red-500/60 to-red-600/40 border-red-400/60\",\n      \"from-indigo-500/60 to-indigo-600/40 border-indigo-400/60\",\n    ]\n\n    const hash = user.split(\"\").reduce((a, b) => {\n      a = (a << 5) - a + b.charCodeAt(0)\n      return a & a\n    }, 0)\n\n    return colors[Math.abs(hash) % colors.length]\n  }\n\n  if (isLoading) {\n    return (\n      <Card className=\"glass border-white/20 h-full\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Calendar className=\"mr-2 h-5 w-5 text-white\" />\n            타임테이블\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-white/70\">로딩 중...</div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"glass border-white/20 h-full\">\n      <CardHeader>\n        <CardTitle className=\"text-white flex items-center\">\n          <Calendar className=\"mr-2 h-5 w-5 text-white\" />\n          합류 시간표\n        </CardTitle>\n        <CardDescription className=\"text-white/70\">\n          친구들이 언제 합류하는지 확인하고 새로운 예약을 추가하세요\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {userSchedules.length > 0 && (\n          <div className=\"glass rounded-lg p-6\">\n            <h3 className=\"text-white font-medium mb-6 flex items-center\">\n              <Users className=\"mr-2 h-5 w-5\" />\n              오늘의 합류 예정 ({userSchedules.length}명)\n            </h3>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center border-b border-white/20 pb-3\">\n                <div className=\"w-48 text-sm text-white/80 font-medium\">사용자 / 게임</div>\n                <div className=\"flex-1 flex\">\n                  {hours.map((hour) => (\n                    <div key={hour} className=\"flex-1 text-center\">\n                      <div className=\"text-xs text-white/60 font-medium\">{hour.toString().padStart(2, \"0\")}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                {userSchedules.map((schedule) => (\n                  <div\n                    key={`${schedule.user}-${schedule.entry.id}`}\n                    className=\"flex items-center group\"\n                    onMouseEnter={() => setHoveredUser(schedule.user)}\n                    onMouseLeave={() => setHoveredUser(null)}\n                  >\n                    <div className=\"w-48 pr-4\">\n                      <div className=\"text-white font-medium text-sm mb-1\">{schedule.user}</div>\n                      <div className=\"flex items-center gap-2\">\n                        <GamepadIcon className=\"h-3 w-3 text-white/60 flex-shrink-0\" />\n                        <span className=\"text-xs text-white/70 truncate\">{schedule.gameName}</span>\n                        <Badge\n                          variant={schedule.custom ? \"secondary\" : \"default\"}\n                          className=\"text-xs px-1.5 py-0.5 bg-white/10 text-white/80 border-white/20\"\n                        >\n                          {schedule.custom ? \"커스텀\" : \"기본\"}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <div className=\"flex-1 flex h-10 gap-px\">\n                      {hours.map((hour) => (\n                        <div\n                          key={hour}\n                          className={`flex-1 relative transition-all duration-300 ${\n                            isUserOnlineAtHour(schedule, hour)\n                              ? `bg-gradient-to-r ${getUserColor(schedule.user, schedule.custom)} border ${\n                                  hoveredUser === schedule.user ? \"scale-y-110 brightness-125\" : \"\"\n                                }`\n                              : \"bg-white/5 border border-white/10\"\n                          } ${\n                            hour === schedule.joinTime\n                              ? \"rounded-l-md border-l-2\"\n                              : hour === 23 && isUserOnlineAtHour(schedule, hour)\n                                ? \"rounded-r-md border-r-2\"\n                                : \"\"\n                          }`}\n                        >\n                          {hour === new Date().getHours() && (\n                            <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 w-0.5 h-full bg-green-400 opacity-80\" />\n                          )}\n                          {resetHour !== null && hour === resetHour && (\n                            <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 w-0.5 h-full bg-red-400 opacity-80\" />\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mt-6 pt-4 border-t border-white/20\">\n                <div className=\"flex items-center gap-6 text-xs text-white/60\">\n\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-6 h-3 bg-gradient-to-r from-blue-500/60 to-blue-600/40 rounded\" />\n                    <span>온라인 시간</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-0.5 h-4 bg-green-400\" />\n                    <span>현재 시간</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-0.5 h-4 bg-red-400\" />\n                    <span>초기화 시간</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <form onSubmit={handleAddEntry} className=\"space-y-4 p-4 glass rounded-lg\">\n          <h3 className=\"text-white font-medium\">새 합류 시간 예약</h3>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Input\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              className=\"glass border-white/30 text-white\"\n              disabled\n            />\n            <Input\n              type=\"time\"\n              value={selectedTime}\n              onChange={(e) => setSelectedTime(e.target.value)}\n              className=\"glass border-white/30 text-white\"\n              required\n            />\n          </div>\n          <Select value={selectedGame} onValueChange={setSelectedGame} defaultValue=\"\">\n            <SelectTrigger className=\"glass border-white/30 text-white\">\n              <SelectValue placeholder=\"게임 선택\" />\n            </SelectTrigger>\n            <SelectContent className=\"glass border-white/20 text-white\">\n              <SelectGroup>\n                <SelectLabel>기본 게임</SelectLabel>\n                {defaultGames.map((game) => (\n                  <SelectItem key={`default-${game.id}`} value={`default-${game.id}`}>\n                    {`${game.name} (기본)`}\n                  </SelectItem>\n                ))}\n              </SelectGroup>\n              <SelectGroup>\n                <SelectLabel>커스텀 게임</SelectLabel>\n                {customGames.map((game) => (\n                  <SelectItem key={`custom-${game.id}`} value={`custom-${game.id}`}>\n                    {`${game.name} (커스텀)`}\n                  </SelectItem>\n                ))}\n              </SelectGroup>\n            </SelectContent>\n          </Select>\n          <Button type=\"submit\" className=\"w-full glass-button text-white hover:bg-black/10\">\n            합류 시간 예약\n          </Button>\n        </form>\n\n        <div className=\"flex gap-3\">\n          <Input\n            placeholder=\"게임 이름으로 필터\"\n            value={gameFilter}\n            onChange={(e) => setGameFilter(e.target.value)}\n            className=\"glass border-white/30 text-white placeholder:text-white/50\"\n          />\n          <Button\n            onClick={() => setSortByGame(!sortByGame)}\n            variant=\"outline\"\n            className={`glass border-white/30 text-white hover:bg-black/10 ${sortByGame ? \"bg-white/10\" : \"\"}`}\n          >\n            <Filter className=\"mr-2 h-4 w-4 text-white \" />\n            게임순\n          </Button>\n        </div>\n\n        <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n          {entries.map((entry) => (\n            <div key={entry.id} className=\"p-3 glass rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"h-4 w-4 text-white/60\" />\n                  <span className=\"text-white font-medium\">{formatDateTime(entry.slot)}</span>\n                </div>\n                <Badge variant={entry.custom ? \"secondary\" : \"default\"} className=\"glass text-white hover:bg-black/10\">\n                  {entry.custom ? \"커스텀\" : \"기본\"}\n                </Badge>\n              </div>\n              <div className=\"text-white/80 text-sm\">\n                <div>게임: {entry.gameName}</div>\n                <div>플레이어: {entry.user}</div>\n              </div>\n            </div>\n          ))}\n          {entries.length === 0 && <div className=\"text-center py-8 text-white/60\">예약된 게임이 없습니다.</div>}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n"
        },
        "icons": {
            "__files__": {
                "discord-icon.tsx": "interface DiscordIconProps {\n  className?: string\n}\n\nexport function DiscordIcon({ className = \"w-6 h-6\" }: DiscordIconProps) {\n  return (\n    <svg className={className} viewBox=\"0 0 24 24\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0 12.64 12.64 0 0 0-.617-1.25.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057 19.9 19.9 0 0 0 5.993 3.03.078.078 0 0 0 .084-.028c.462-.63.874-1.295 1.226-1.994a.076.076 0 0 0-.041-.106 13.107 13.107 0 0 1-1.872-.892.077.077 0 0 1-.008-.128 10.2 10.2 0 0 0 .372-.292.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127 12.299 12.299 0 0 1-1.873.892.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028 19.839 19.839 0 0 0 6.002-3.03.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.956-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.955-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.946 2.418-2.157 2.418z\" />\n    </svg>\n  )\n}\n"
            }
        },
        "ui": {
            "__files__": {
                "badge.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
                "button.tsx": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
                "card.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
                "dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
                "input.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
                "label.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
                "select.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"
            }
        }
    },
    "lib": {
        "__files__": {
            "auth-service.ts": "const API_BASE = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8080/api\"\n\ninterface LoginRequest {\n  username: string\n  password: string\n}\n\ninterface SignupRequest {\n  username: string\n  nickname: string\n  password: string\n}\n\n// 백엔드 응답 형태에 맞춰 LoginResponse 수정\ninterface LoginResponse {\n  token: string\n  message: string\n  userId: number    // 사용자 ID\n  nickname: string  // 사용자 닉네임\n}\n\n// 백엔드에서 Signup 시 userId, nickname을 반환하면 저장할 수 있도록 옵션 추가\ninterface SignupResponse {\n  message: string\n  userId?: number\n  nickname?: string\n}\n\nclass AuthService {\n  private tokenKey = \"auth-token\"\n  private userKey = \"current-user\"\n  private userIdKey = \"current-user-id\"\n\n  setToken(token: string) {\n    localStorage.setItem(this.tokenKey, token)\n  }\n\n  setCurrentUser(user: { id: number; nickname: string }) {\n    localStorage.setItem(this.userIdKey, String(user.id))\n    localStorage.setItem(this.userKey, user.nickname)\n  }\n\n  async login(credentials: LoginRequest): Promise<LoginResponse> {\n    const response = await fetch(`${API_BASE}/auth/login`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(credentials),\n    })\n    if (!response.ok) throw new Error(\"Login failed\")\n\n    const data: LoginResponse = await response.json()\n\n    // 토큰 및 사용자 정보 저장\n    this.setToken(data.token)\n    this.setCurrentUser({ id: data.userId, nickname: data.nickname })\n\n    return data\n  }\n\n  async signup(credentials: SignupRequest): Promise<SignupResponse> {\n    const response = await fetch(`${API_BASE}/auth/signup`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(credentials),\n    })\n    if (!response.ok) throw new Error(\"Signup failed\")\n\n    const data: SignupResponse = await response.json()\n\n    // 응답에 userId와 nickname이 포함되면 저장\n    if (data.userId !== undefined && data.nickname) {\n      this.setCurrentUser({ id: data.userId, nickname: data.nickname })\n    }\n    return data\n  }\n\n  async logout(): Promise<void> {\n    const token = this.getToken()\n    if (token) {\n      try {\n        await fetch(`${API_BASE}/auth/logout`, {\n          method: \"POST\",\n          headers: { Authorization: `Bearer ${token}` },\n        })\n      } catch {\n        // 무시\n      }\n    }\n    localStorage.removeItem(this.tokenKey)\n    localStorage.removeItem(this.userKey)\n    localStorage.removeItem(this.userIdKey)\n  }\n\n  getToken(): string | null {\n    return typeof window !== \"undefined\" ? localStorage.getItem(this.tokenKey) : null\n  }\n\n  getCurrentUser(): string | null {\n    return typeof window !== \"undefined\" ? localStorage.getItem(this.userKey) : null\n  }\n\n  getCurrentUserId(): number | null {\n    const v = typeof window !== \"undefined\" ? localStorage.getItem(this.userIdKey) : null\n    return v ? Number(v) : null\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken()\n  }\n\n  getAuthHeaders(): Record<string, string> {\n    const token = this.getToken()\n    return token ? { Authorization: `Bearer ${token}` } : {}\n  }\n}\n\nexport const authService = new AuthService()\n",
            "fetch-with-auth.ts": "// lib/fetch-with-auth.ts\nimport { authService } from \"./auth-service\"\n\nexport async function fetchWithAuth(input: RequestInfo, init: RequestInit = {}) {\n  const headers = {\n    ...init.headers,\n    ...authService.getAuthHeaders(),\n  }\n\n  const res = await fetch(input, { ...init, headers })\n\n  if (res.status === 403) {\n    // 인증 만료\n    authService.logout()\n    // 로그인 페이지로 바로 이동\n    if (typeof window !== \"undefined\") window.location.href = \"/auth/login\"\n    // 이후 코드는 실행되지 않도록\n    throw new Error(\"UNAUTHORIZED\")\n  }\n\n  return res\n}\n",
            "game-service.ts": "import { authService } from \"./auth-service\"\n\nconst API_BASE = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8080/api\"\n\ninterface Game {\n  id: number\n  name: string\n}\n\ninterface DefaultGameListResponse {\n  defaultGames: Game[]\n}\n\ninterface CustomGameListResponse {\n  customGames: Game[]\n}\n\ninterface CustomGameRequest {\n  name: string\n}\n\ninterface ScheduledUserListResponse {\n  users: { username: string }[]\n}\n\nclass GameService {\n  async getDefaultGames(): Promise<DefaultGameListResponse> {\n    const response = await fetch(`${API_BASE}/games/default`, {\n      headers: authService.getAuthHeaders(),\n    })\n    if (!response.ok) throw new Error(\"Failed to fetch default games\")\n    return response.json()\n  }\n\n  async getCustomGames(serverId: number): Promise<CustomGameListResponse> {\n    const response = await fetch(`${API_BASE}/servers/${serverId}/custom-games`, {\n      headers: authService.getAuthHeaders(),\n    })\n    if (!response.ok) throw new Error(\"Failed to fetch custom games\")\n    return response.json()\n  }\n\n  async addCustomGame(serverId: number, data: CustomGameRequest): Promise<Game> {\n    const response = await fetch(`${API_BASE}/servers/${serverId}/custom-games`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...authService.getAuthHeaders(),\n      },\n      body: JSON.stringify(data),\n    })\n    if (!response.ok) throw new Error(\"Failed to add custom game\")\n    return response.json()\n  }\n\n  async getScheduledUsers(serverId: number, gameId: number): Promise<ScheduledUserListResponse> {\n    const response = await fetch(\n      `${API_BASE}/servers/${serverId}/custom-games/${gameId}/scheduled-users`,\n      { headers: authService.getAuthHeaders() }\n    )\n    if (!response.ok) throw new Error(\"Failed to fetch scheduled users\")\n    return response.json()\n  }\n\n  async deleteCustomGame(serverId: number, gameId: number): Promise<void> {\n    const response = await fetch(\n      `${API_BASE}/servers/${serverId}/custom-games/${gameId}`,\n      {\n        method: \"DELETE\",\n        headers: authService.getAuthHeaders(),\n      }\n    )\n    if (!response.ok) throw new Error(\"Failed to delete custom game\")\n  }\n}\n\nexport const gameService = new GameService()",
            "server-service.ts": "import { authService } from \"./auth-service\";\nimport { fetchWithAuth } from \"./fetch-with-auth\";\n\nconst API_BASE = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8080/api\";\n\nexport interface MemberInfo {\n  id: number;\n  nickname: string;\n  username: string;\n}\n\nexport interface Server {\n  id: number;\n  name: string;\n  ownerId: number\n  owner: string; // 백엔드에서 nickname으로 받는중\n  members: MemberInfo[];\n  inviteCode: string;\n  admins: MemberInfo[];\n  resetTime: string;\n}\n\ninterface SearchParams {\n  page: number;\n  size: number;\n  q?: string;\n}\n\nclass ServerService {\n  async createServer(data: { name: string; resetTime: string }): Promise<Server> {\n    const res = await fetch(`${API_BASE}/servers`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\", ...authService.getAuthHeaders() },\n      body: JSON.stringify(data),\n    });\n    if (!res.ok) throw new Error(\"Failed to create server\");\n    return res.json();\n  }\n\n  async getServers(): Promise<Server[]> {\n    const res = await fetch(`${API_BASE}/servers`, { headers: authService.getAuthHeaders() });\n    if (!res.ok) throw new Error(\"Failed to fetch servers\");\n    return res.json();\n  }\n\n  async getServer(id: number): Promise<Server> {\n    const res = await fetch(`${API_BASE}/servers/${id}`, { headers: authService.getAuthHeaders() });\n    if (!res.ok) throw new Error(\"Failed to fetch server\");\n    return res.json();\n  }\n\n  async getMyServers(): Promise<Server[]> {\n    const res = await fetchWithAuth(`${API_BASE}/servers/mine`);\n    if (!res.ok) throw new Error(\"Failed to fetch my servers\");\n    return res.json();\n  }\n\n  async joinByCode(code: string): Promise<Server> {\n  const res = await fetch(`${API_BASE}/servers/join?code=${code}`, {\n    method: \"POST\",\n    headers: authService.getAuthHeaders(),\n  })\n  if (!res.ok) throw new Error(\"Invalid code\")\n  return res.json()\n}\n\n  async searchServers(params: SearchParams): Promise<Server[]> {\n    const qs = new URLSearchParams();\n    qs.append(\"page\", params.page.toString());\n    qs.append(\"size\", params.size.toString());\n    if (params.q) qs.append(\"q\", params.q);\n    const res = await fetch(`${API_BASE}/servers/search?${qs}`, {\n      headers: authService.getAuthHeaders(),\n    });\n    if (!res.ok) throw new Error(\"Failed to search servers\");\n    return res.json();\n  }\n\n  async joinServer(id: number): Promise<Server> {\n    const res = await fetch(`${API_BASE}/servers/${id}/join`, {\n      method: \"POST\",\n      headers: authService.getAuthHeaders(),\n    });\n    if (!res.ok) throw new Error(\"Failed to join server\");\n    return res.json();\n  }\n\n  async kickMember(serverId: number, userId: number): Promise<void> {\n    const res = await fetch(`${API_BASE}/servers/${serverId}/kick`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\", ...authService.getAuthHeaders() },\n      body: JSON.stringify({ userId }),\n    });\n    if (!res.ok) throw new Error(\"Failed to kick member\");\n  }\n\n  async renameServer(serverId: number, name: string): Promise<Server> {\n    const res = await fetch(`${API_BASE}/servers/${serverId}/name`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\", ...authService.getAuthHeaders() },\n      body: JSON.stringify({ name }),\n    });\n    if (!res.ok) throw new Error(\"Failed to rename server\");\n    return res.json();\n  }\n\n  async updateResetTime(serverId: number, resetTime: string): Promise<Server> {\n    const res = await fetch(`${API_BASE}/servers/${serverId}/reset-time`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\", ...authService.getAuthHeaders() },\n      body: JSON.stringify({ resetTime }),\n    });\n    if (!res.ok) throw new Error(\"Failed to update reset time\");\n    return res.json();\n  }\n\n  async updateAdmin(serverId: number, userId: number, grant: boolean): Promise<Server> {\n    const res = await fetch(`${API_BASE}/servers/${serverId}/admins`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\", ...authService.getAuthHeaders() },\n      body: JSON.stringify({ userId, grant }),\n    });\n    if (!res.ok) throw new Error(\"Failed to update admin\");\n    return res.json();\n  }\n\n  async deleteServer(id: number): Promise<void> {\n    const res = await fetchWithAuth(`${API_BASE}/servers/${id}`, { method: \"DELETE\" });\n    if (!res.ok) throw new Error(\"Failed to delete server\");\n  }\n\n  async leaveServer(id: number): Promise<void> {\n    const res = await fetchWithAuth(`${API_BASE}/servers/${id}/leave`, { method: \"POST\" });\n    if (!res.ok) throw new Error(\"Failed to leave server\");\n  }\n}\n\nexport const serverService = new ServerService();\n",
            "timetable-service.ts": "import { authService } from \"./auth-service\"\n\nconst API_BASE = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8080/api\"\n\ninterface TimetableEntry {\n  id: number\n  user: string\n  slot: string\n  gameId: number\n  gameName: string\n  custom: boolean\n}\n\ninterface TimetableEntryRequest {\n  serverId: number\n  slot: string\n  defaultGameId?: number\n  customGameId?: number\n}\n\ninterface TimetableStats {\n  topGame: string\n  avgSlot: string\n  peakSlot: string\n  peakCount: number\n}\n\nclass TimetableService {\n  async getTimetable(serverId: number, game?: string, sortByGame?: boolean): Promise<TimetableEntry[]> {\n    const params = new URLSearchParams()\n    if (game) params.append(\"game\", game)\n    if (sortByGame) params.append(\"sortByGame\", \"true\")\n\n    const response = await fetch(`${API_BASE}/servers/${serverId}/timetable?${params}`, {\n      headers: authService.getAuthHeaders(),\n    })\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch timetable\")\n    }\n\n    return response.json()\n  }\n\n  async addEntry(data: TimetableEntryRequest): Promise<TimetableEntry> {\n    const response = await fetch(`${API_BASE}/servers/${data.serverId}/timetable`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...authService.getAuthHeaders(),\n      },\n      body: JSON.stringify(data),\n    })\n\n    if (!response.ok) {\n      throw new Error(\"Failed to add timetable entry\")\n    }\n\n    return response.json()\n  }\n\n  async getStats(serverId: number): Promise<TimetableStats> {\n    const response = await fetch(`${API_BASE}/servers/${serverId}/timetable/stats`, {\n      headers: authService.getAuthHeaders(),\n    })\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch stats\")\n    }\n\n    return response.json()\n  }\n}\n\nexport const timetableService = new TimetableService()\n",
            "utils.ts": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"
        }
    }
}